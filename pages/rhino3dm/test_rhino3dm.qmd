---
title: "test rhino3dm"
code-annotations: hover
---

# Docs

- [rhino3dm github](https://github.com/mcneel/rhino3dm)

- [rhino3dm doc](https://mcneel.github.io/rhino3dm/python/api/index.html)

- [developer examples](https://github.com/mcneel/rhino-developer-samples/tree/7/rhino3dm)

    - [rhino3dm.py](https://github.com/mcneel/rhino-developer-samples/tree/7/rhino3dm/py)

    - [rhino3dm.js](https://github.com/mcneel/rhino-developer-samples/tree/7/rhino3dm/js)


# Install rhino3dm:

```shell 
> pip install rhino3dm

> pip show rhino3dm

Name: rhino3dm
Version: 8.6.0
Summary: Python library based on OpenNURBS with a RhinoCommon
 style
Home-page: 
Author: Robert McNeel & Associates
Author-email: steve@mcneel.com
License: 
Location: C:\Users\USERNAME\.conda\envs\ai\Lib\site-packages
Requires: 
Required-by: compute-rhino3d
```


# Example 1

```python
from rhino3dm import *
import requests  # pip install requests

req = requests.get("https://files.mcneel.com/TEST/Rhino Logo.3dm")

model = File3dm.FromByteArray(req.content)

for i in range(len(model.Objects)):
    obj = model.Objects[i]
    geometry = obj.Geometry
    bbox = geometry.GetBoundingBox()

    print("model object ", i, ':', obj)
    print("bbbox min & max: {}, {}".format(bbox.Min, bbox.Max), '\n')
```

::: {.column-margin}
::: {.callout-tip title="File3dm.FromByteArray -> File3dm" collapse="true"}
[File3dm.FromByteArray](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.FromByteArray)

Read a 3dm file from a byte array

- Returns:      New File3dm on success, None on error.

- Return type:  File3dm
:::
:::

::: {.column-margin}
::: {.callout-tip title="File3dm.Objects --> File3dmObjectTable" collapse="true"}
[File3dm.Objects](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Objects)

File3dmObjectTable: Gets access to the class associated with this file, which contains all objects.
:::
:::

::: {.column-margin}
::: {.callout-tip title="File3dmObject.Geometry -> rhino3dm.GeometryBase" collapse="true"}
[File3dmObject.Geometry](https://mcneel.github.io/rhino3dm/python/api/File3dmObject.html#rhino3dm.File3dmObject.Geometry)

rhino3dm.GeometryBase: Gets the geometry that is linked with this document object.
:::
:::

::: {.column-margin}
::: {.callout-tip title="GeometryBase.GetBoundingBox -> rhino3dm.BoundingBox" collapse="true"}
[GeometryBase.GetBoundingBox](https://mcneel.github.io/rhino3dm/python/api/GeometryBase.html#rhino3dm.GeometryBase.GetBoundingBox)

Bounding box solver. Gets the world axis aligned bounding box for the geometry.

Parameters:

- accurate (bool) – If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. For some geometry types there is no difference between the estimate and the accurate bounding box. Estimated bounding boxes can be computed much (much) faster than accurate (or “tight”) bounding boxes. Estimated bounding boxes are always similar to or larger than accurate bounding boxes.

Returns:

- The bounding box of the geometry in world coordinates or BoundingBox.Empty if not bounding box could be found.

Return type:

- rhino3dm.BoundingBox
:::
:::

::: {.column-margin}
::: {.callout-tip title="rhino3dm.BoundingBox" collapse="true"}
[class rhino3dm.BoundingBox](https://mcneel.github.io/rhino3dm/python/api/BoundingBox.html#rhino3dm.BoundingBox)

> `BoundingBox(minX, minY, minZ, maxX, maxY, maxZ)`
> 
> Constructs a bounding box from numeric extremes.
> 
> Parameters:
>
>    - minX (float) – Lower extreme for box X size.
>    - minY (float) – Lower extreme for box Y size.
>    - minZ (float) – Lower extreme for box Z size.
>    - maxX (float) – Upper extreme for box X size.
>    - maxY (float) – Upper extreme for box Y size.
>    - maxZ (float) – Upper extreme for box Z size.
:::
:::


# Example 2 

```python
from rhino3dm import *

center = Point3d(1, 2, 3)
arc = Arc(center, 10, 1)
nc = arc.ToNurbsCurve()
start = nc.PointAtStart
print('start point', type(start))
```


# Example 3

```python
import rhino3dm
import random

model = rhino3dm.File3dm()

for i in range(20):
	pt = rhino3dm.Point3d(random.uniform(-10,10), random.uniform(-10,10), 0)
	model.Objects.AddPoint(pt)
	circle = rhino3dm.Circle(pt, random.uniform(1,4))
	model.Objects.AddCircle(circle)
	
# [note] the 3dm file can only be open in Rhino v8
# model.Write("./circle.3dm")
```


# Example 4

```python
# Sample read render meshes from 3dm file

import rhino3dm

model = rhino3dm.File3dm.Read('./myBox.3dm')
print(model)

brep = model.Objects[0].Geometry
print(brep)

face = brep.Faces[0]
print(face)

mesh = face.GetMesh(rhino3dm.MeshType.Any)
print(mesh)
# print (len(mesh.Faces))
```


# Example 5

```python
# spherelines.py
# Sample script that demonstrates how to use Rhino3dm.py
# https://github.com/mcneel/rhino3dm
# This sample creates a 3dm file containing a group of randomly
# distributed lines defining an sphere.

import rhino3dm
import random
import math
import os

# Initial parameters
theta_min = 0.0
theta_max = math.pi
alpha_min = 0.0
alpha_max = math.pi * 2.0
sphere_radius = 100.0
num_lines = 1500

# Create a center point
center_pt = rhino3dm.Point3d(0.0, 0.0, 0.0)

# Create a File3dm object
model = rhino3dm.File3dm()

for i in range(num_lines):
	# Calculate random line end point
	random.seed(i * 100)
	theta = random.uniform(theta_min, theta_max)
	alpha = random.uniform(alpha_min, alpha_max)
	x = sphere_radius * math.sin(theta) * math.cos(alpha)
	y = sphere_radius * math.sin(theta) * math.sin(alpha)
	z = sphere_radius * math.cos(theta)
	end_pt = rhino3dm.Point3d(x, y, z)
	# Create line curve
	line_curve = rhino3dm.LineCurve(center_pt, end_pt)
	# Add to model
	model.Objects.AddCurve(line_curve)

# Full path to 3dm file to save
desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop') 
filename = 'spherelines.3dm'
# path = os.path.join(desktop, filename)
path = './spherelines.3dm'

# Write model to disk
model.Write(path, 6)
```


# test reading geometry by layer name

```{python}
import rhino3dm

model = rhino3dm.File3dm.Read('./data/oat_model.3dm')   # <1>
print('model object: ', model)
print('------')

layer_table = model.Layers                              # <2>
print('layer table: ', layer_table, '\n')

for idx, layer in enumerate(iter(layer_table)):         # <3>
    print('layer ', idx, ' object  : ', layer)
    print('      ', idx, ' id      : ', layer.Id)
    print('      ', idx, ' index   : ', layer.Index)
    print('      ', idx, ' name    : ', layer.Name)
    print('      ', idx, ' fullpath: ', layer.FullPath)

print('------')

object_table = model.Objects                            # <4>
print('object table: ', object_table, '\n')

for idx, object in enumerate(iter(object_table)):       # <5>
    print('object ', idx, ' object    : ', object)
    print('       ', idx, ' geometry  : ', object.Geometry)
    print('       ', idx, ' attributes: ', object.Attributes)
    print('       ', idx, ' layerIndex: ', object.Attributes.LayerIndex)

print('------')


# brep = model.Objects[0].Geometry
# face = brep.Faces[0]
# mesh = face.GetMesh(rhino3dm.MeshType.Any)
# print (len(mesh.Faces))
```
1. read `.3dm` file as `File3dm` object
2. get the `LayerTable` object
3. iterate `LayerTable` to get each `Layer` and its attributes
4. get `ObjectTable` in the model
5. iterate `ObjectTable` to get each `Object` and its attributes


::: {.column-margin}

::: {.callout-tip title="File3dm.Read()" collapse="true"}
[**_method_**  `rhino3dm.File3dm.Read()`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Read)

<br />

Reads a `3dm` file from the specified path.

<br />

Parameters:

- path (str) – The file to read.

Returns:

- new File3dm on success, None on error.

Return type:

- File3dm
:::

::: {.callout-tip title="File3dm.Layers" collapse="true"}
[**_attrib_**  `rhino3dm.File3dm.Layer`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Layers)

<br />

IList<Layer>: Layers in this file.

<br />

Returns: 

- File3dmLayerTable
:::

::: {.callout-tip title="File3dmLayerTable" collapse="true"}
[**_class_**  `rhino3dm.File3dmLayerTable`](https://mcneel.github.io/rhino3dm/python/api/File3dmLayerTable.html#module-rhino3dm)

<br />

Each item is a `rhino3dm.Layer` object

<br />

Methods:

- \__getitem__()
- \__iter__()
- \__len__()
- ...
:::

::: {.callout-tip title="Layer" collapse="true"}
[**_class_**  `rhino3dm.Layer`](https://mcneel.github.io/rhino3dm/python/api/Layer.html#module-rhino3dm)

<br />

Attributes:

- Color
- FullPath
- Id
- Index
- Locked
- Name
- ParentLayerId
- Visible
- ...
:::

::: {.callout-tip title="File3dm.Objects" collapse="true"}
[**_attrib_**  `rhino3dm.File3dm.Objects`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Objects)

<br />

Returns a `File3dmObjectTable`: Gets access to the class associated with this file, which contains all objects.
:::

::: {.callout-tip title="File3dmObjectTable" collapse="true"}

[**_class_**  `rhino3dm.File3dmObjectTable`](https://mcneel.github.io/rhino3dm/python/api/File3dmObjectTable.html#module-rhino3dm)

<br />

Each item is a `rhino3dm.Object` object

<br />

Methods:

- \__getitem__()
- \__iter__()
- \__len__()
- ...
:::

::: {.callout-tip title="File3dmObject" collapse="true"}

[**_class_**  `rhino3dm.File3dmObject`](https://mcneel.github.io/rhino3dm/python/api/File3dmObject.html#module-rhino3dm)

<br />

Attribs:

- Attributes 
    - `ObjectAttributes`: Gets the attributes that are linked with this document object.

- Geometry 
    - `rhino3dm.GeometryBase`: Gets the geometry that is linked with this document object.
:::

::: {.callout-tip title="ObjectAttributes" collapse="true"}

[**_class_**  `rhino3dm.ObjectAttributes`](https://mcneel.github.io/rhino3dm/python/api/ObjectAttributes.html#module-rhino3dm)

<br />

Attribs:

- Id
- LayerIndex
- MaterialIndex
- Name
- ObjectColor
- Visible
- ...
:::

::: {.callout-tip title="GeomtryBase" collapse="true"}

[**_class_**  `rhino3dm.GeometryBase`](https://mcneel.github.io/rhino3dm/python/api/GeometryBase.html#module-rhino3dm)

<br />

Attribs:

- ObjectType
- ...
:::

:::


