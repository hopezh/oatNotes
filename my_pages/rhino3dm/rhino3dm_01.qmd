---
title: "rhino3dm exercise 01"
filters:
    - line-highlight
---


# Extract info from `.3dm` file


The demo file: [oat_model.3dm](./data/oat_model.3dm)

![](./image/01.png)


## read `.3dm` file


```{python}
import rhino3dm

model = rhino3dm.File3dm.Read('./data/oat_model.3dm')   # <1>
print('model object: ', model)

```
1. read `.3dm` file as `File3dm` object

:::: {.column-margin}
::: {.callout-tip title="File3dm.Read()" collapse="true"}
[**_method_**  `rhino3dm.File3dm.Read()`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Read)

<br />

Reads a `3dm` file from the specified path.

<br />

Parameters:

- path (str) – The file to read.

Returns:

- new File3dm on success, None on error.

Return type:

- File3dm
:::
::::


## read `Layer`

```{python}
layer_table = model.Layers                              # <2>
print('layer table: ', layer_table, '\n')

for idx, layer in enumerate(iter(layer_table)):         # <3>
    print('layer ', idx, ' Object  : ', layer)
    print('      ', idx, ' Id      : ', layer.Id)
    print('      ', idx, ' Index   : ', layer.Index)
    print('      ', idx, ' Name    : ', layer.Name)
    print('      ', idx, ' Fullpath: ', layer.FullPath)
```
2. get the `LayerTable` object
3. iterate `LayerTable` to get each `Layer` and its attributes

:::: {.column-margin}
::: {.callout-tip title="File3dm.Layers" collapse="true"}
[**_attrib_**  `rhino3dm.File3dm.Layer`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Layers)

<br />

IList<Layer>: Layers in this file.

<br />

Returns: 

- File3dmLayerTable
:::

::: {.callout-tip title="File3dmLayerTable" collapse="true"}
[**_class_**  `rhino3dm.File3dmLayerTable`](https://mcneel.github.io/rhino3dm/python/api/File3dmLayerTable.html#module-rhino3dm)

<br />

Each item is a `rhino3dm.Layer` object

<br />

Methods:

- \__getitem__()
- \__iter__()
- \__len__()
- ...
:::

::: {.callout-tip title="Layer" collapse="true"}
[**_class_**  `rhino3dm.Layer`](https://mcneel.github.io/rhino3dm/python/api/Layer.html#module-rhino3dm)

<br />

Attributes:

- Color
- FullPath
- Id
- Index
- Locked
- Name
- ParentLayerId
- Visible
- ...
:::
::::


## read `Objects`

```{python}
object_table = model.Objects                            # <4>
print('object table: ', object_table, '\n')

for idx, obj in enumerate(iter(object_table)):       # <5>
    print('object ', idx, ' Object                : ', obj)
    print('       ', idx, ' Geometry              : ', obj.Geometry)
    print('       ', idx, ' Attributes            : ', obj.Attributes)
    print('       ', idx, ' Attributes.Id         : ', obj.Attributes.Id)
    print('       ', idx, ' Attributes.Name       : ', obj.Attributes.Name)
    print('       ', idx, ' Attributes.LayerIndex : ', obj.Attributes.LayerIndex)
    print('       ', idx, ' Attributes.ObjectColor: ', obj.Attributes.ObjectColor)
    print('       ', idx, ' Attributes.Visible    : ', obj.Attributes.Visible)
    print()
```
4. get `ObjectTable` in the model
5. iterate `ObjectTable` to get each `Object` and its attributes


:::: {.column-margin}
::: {.callout-tip title="File3dm.Objects" collapse="true"}
[**_attrib_**  `rhino3dm.File3dm.Objects`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Objects)

<br />

Returns a `File3dmObjectTable`: Gets access to the class associated with this file, which contains all objects.
:::

::: {.callout-tip title="File3dmObjectTable" collapse="true"}

[**_class_**  `rhino3dm.File3dmObjectTable`](https://mcneel.github.io/rhino3dm/python/api/File3dmObjectTable.html#module-rhino3dm)

<br />

Each item is a `rhino3dm.Object` object

<br />

Methods:

- \__getitem__()
- \__iter__()
- \__len__()
- ...
:::

::: {.callout-tip title="File3dmObject" collapse="true"}

[**_class_**  `rhino3dm.File3dmObject`](https://mcneel.github.io/rhino3dm/python/api/File3dmObject.html#module-rhino3dm)

<br />

Attribs:

- Attributes 
    - `ObjectAttributes`: Gets the attributes that are linked with this document object.

- Geometry 
    - `rhino3dm.GeometryBase`: Gets the geometry that is linked with this document object.
:::

::: {.callout-tip title="ObjectAttributes" collapse="true"}

[**_class_**  `rhino3dm.ObjectAttributes`](https://mcneel.github.io/rhino3dm/python/api/ObjectAttributes.html#module-rhino3dm)

<br />

Attribs:

- Id
- LayerIndex
- MaterialIndex
- Name
- ObjectColor
- Visible
- ...
:::
::::


## read `Geometry`

```{python}
for idx, obj in enumerate(iter(object_table)):
    print('object ', idx, ' Object                       : ', obj)
    print('       ', idx, ' Geometry                     : ', obj.Geometry)
    print('       ', idx, ' Geometry.ObjectType          : ', obj.Geometry.ObjectType)
    print('       ', idx, ' Geometry.BoundingBox()       : ', obj.Geometry.GetBoundingBox())
    print('       ', idx, ' Geometry.BoundingBox().Min   : ', obj.Geometry.GetBoundingBox().Min)
    print('       ', idx, ' Geometry.BoundingBox().Min.X : ', obj.Geometry.GetBoundingBox().Min.X)
    print('')

    # if isinstance(obj.Geometry, rhino3dm.Curve):
    if isinstance(obj.Geometry, rhino3dm.PolylineCurve):
        print('           curve Object       :', obj)
        print('           curve Geometry     :', obj.Geometry)
        print('           curve IsClosed     :', obj.Geometry.IsClosed)
        print('           curve IsPlanar     :', obj.Geometry.IsPlanar())
        print('           curve IsPolyline   :', obj.Geometry.IsPolyline())
        print()

        print('           curve PointCount   :', obj.Geometry.PointCount)
        
        for i in range(obj.Geometry.PointCount):
            # print('           curve pt ', i, ' : ', obj.Geometry.ToPolyline().PointAt(i))
            print('           curve pt ', i, ' : ', obj.Geometry.Point(i))

        print()

        print('           curve SegmentCount :', obj.Geometry.ToPolyline().SegmentCount)

        for i in range(obj.Geometry.ToPolyline().SegmentCount):
            print('           segement ', i, ' : ', obj.Geometry.ToPolyline().SegmentAt(i))

        print()
```


:::: {.column-margin}
::: {.callout-tip title="GeomtryBase" collapse="true"}

[**_class_**  `rhino3dm.GeometryBase`](https://mcneel.github.io/rhino3dm/python/api/GeometryBase.html#module-rhino3dm)

<br />

Attribs:

- ObjectType
- ...

Methods:

- GetBoundingBox()
- ...
:::

::: {.callout-tip title="BoundingBox" collapse="true"}

[**_class_**  `rhino3dm.BoundingBox`](https://mcneel.github.io/rhino3dm/python/api/BoundingBox.html#module-rhino3dm)

<br />

Constructor:

- BoundingBox(min, max)
- BoundingBox(minX, minY, minZ, maxX, maxY, maxZ)
- ...

Attribs:

- Min: 
    - rhino3dm.Point3d: Gets or sets the point in the minimal corner.

- Max: 
    - rhino3dm.Point3d: Gets or sets the point in the maximal corner.

- Center: 
    - rhino3dm.Point3d: Gets the point in the center of the bounding box.

- Area: 
    - float: Gets the area of this BoundingBox.

- Volume: 
    - float: Gets the volume of this BoundingBox.

- Diagonal: 
    - rhino3dm.Vector3d: Gets the diagonal vector of this BoundingBox. The diagonal connects the Min and Max points.

Methods:

- ClosestPoint(point)
    - Finds the closest point on or in the bounding box.

    - Parameters: point (rhino3dm.Point3d) – Sample point.

    - Returns: The point on or in the box that is closest to the sample point.

    - Return type: rhino3dm.Point3d

- Contains(point)
    - Tests a point for bounding box inclusion. This is the same as calling Contains(point, false)

    - Parameters: point (rhino3dm.Point3d) – Point to test.

    - Returns: True if the point is on the inside of or coincident with this bounding box; otherwise false.

    - Return type: bool

- ...
:::

::: {.callout-tip title="Point3d" collapse="true"}

[**_class_**  `rhino3dm.Point3d`](https://mcneel.github.io/rhino3dm/python/api/Point3d.html)

<br />

Constructor:

- Point3d(x, y, z)

Attributs:

- X: float: Gets or sets the X (first) coordinate of this point.

- Y: float: Gets or sets the Y (second) coordinate of this point.

- Z: float: Gets or sets the Z (third) coordinate of this point.

Methods:

- DistanceTo(other)
    - Computes the distance between two points.
    - Parameters: other (rhino3dm.Point3d) – Other point for distance measurement.
    - Returns: The length of the line between this and the other point; or 0 if any of the points is not valid.
    - Return type: float

- ...
:::

::: {.callout-tip title="Curve" collapse="true"}

[**_class_**  `rhino3dm.Curve`](https://mcneel.github.io/rhino3dm/python/api/Curve.html)

<br />

:::

::: {.callout-tip title="PolylineCurve" collapse="true"}

[**_class_**  `rhino3dm.PolylineCurve`](https://mcneel.github.io/rhino3dm/python/api/PolylineCurve.html)

<br />

:::

::: {.callout-tip title="Polyline" collapse="true"}

[**_class_**  `rhino3dm.Polyline`](https://mcneel.github.io/rhino3dm/python/api/Polyline.html)

<br />

:::
::::


## backup code

```python
```


