---
title: "rhino3dm exercise 02"
filters:
    - line-highlight
---

## import and util funcs

```{python}
import rhino3dm
from dataclasses import dataclass, field
import random
import string

print('rhino3dm ver: ', rhino3dm.__version__)

def generate_id() -> str:
    return "".join(random.choices(string.ascii_lowercase, k=12))
```


## read `.3dm` file

```{python}
rhino_f_path = "./data/nongke.3dm"
file3dm_obj = rhino3dm.File3dm.Read(rhino_f_path)
print('rhino3dm.File3dm object: ', file3dm_obj)
```


## read `notes`

```{python}
file3dm_notes = rhino3dm.File3dm.ReadNotes(rhino_f_path).split(';')[:-1]

for idx, note in enumerate(file3dm_notes):
    print(
        note.strip().split(':')[0].strip(),
        ' : ',
        note.strip().split(':')[1].strip()
    )
```


:::: {.column-margin}
::: {.callout-tip title="File3dm.ReadNotes()" collapse="true"}
[**_method_**  `rhino3dm.File3dm.ReadNotes()`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.ReadNotes)

<br />

Reads only the notes from an existing 3dm file.

<br />

Parameters: 

- path (str) â€“ The file from which to read the notes.

Returns: 

- The 3dm file notes.

Return type: 

- str
:::
::::


## read `Layer`

```{python}
layer_table = file3dm_obj.Layers
print('layer table object: ', layer_table)
print('num of layers: ', len(layer_table))
print()

for idx, layer in enumerate(iter(layer_table)):
    print('layer ', idx, ' Object  : ', layer)
    print('      ', idx, ' Id      : ', layer.Id)
    print('      ', idx, ' Index   : ', layer.Index)
    print('      ', idx, ' Name    : ', layer.Name)
    print('      ', idx, ' Fullpath: ', layer.FullPath)
    print('      ', idx, ' Color   : ', layer.Color)
    print()
```


## read `ObjectsTable`

```{python}
object_table = file3dm_obj.Objects
print('object table: ', object_table, '\n')
```


## create dataclass `OatPV` 

```{python}
@dataclass
class OatPV:
    idx: int
    outline: rhino3dm.PolylineCurve
    str_num: str = ''
    id: str = field(default_factory=generate_id)
```


## read `pv`

```{python}
layer_idx_of_pv = 4
cnt_pv = 0
max_num_obj = 3
total_num_pv = 0

oatPV_list = []

for idx, obj in enumerate(iter(object_table)):
    if (obj.Attributes.LayerIndex == layer_idx_of_pv) and (cnt_pv < max_num_obj):
        print('object ', idx, ' Object                : ', obj)
        print('       ', idx, ' Geometry              : ', obj.Geometry)
        print('       ', idx, ' Attributes            : ', obj.Attributes)
        print('       ', idx, ' Attributes.Id         : ', obj.Attributes.Id)
        print('       ', idx, ' Attributes.Name       : ', obj.Attributes.Name)
        print('       ', idx, ' Attributes.LayerIndex : ', obj.Attributes.LayerIndex)
        print('       ', idx, ' Attributes.ObjectColor: ', obj.Attributes.ObjectColor)
        print('       ', idx, ' Attributes.Visible    : ', obj.Attributes.Visible)
        print()

        # if geom is PolylineCurve, print its details
        if isinstance(obj.Geometry, rhino3dm.PolylineCurve):
            print('            curve IsClosed     :', obj.Geometry.IsClosed)
            print('            curve IsPlanar     :', obj.Geometry.IsPlanar())
            print('            curve IsPolyline   :', obj.Geometry.IsPolyline())
            print()

            print('            curve PointCount   :', obj.Geometry.PointCount)
            
            for i in range(obj.Geometry.PointCount):
                print('            curve pt ', i, ' : ', obj.Geometry.Point(i))
                # print('           curve pt ', i, ' : ', obj.Geometry.ToPolyline().PointAt(i)) -- alternative

            print()

            print('            curve SegmentCount :', obj.Geometry.ToPolyline().SegmentCount)

            for i in range(obj.Geometry.ToPolyline().SegmentCount):
                print('            segement ', i, ' : ', obj.Geometry.ToPolyline().SegmentAt(i))

            print()

            oatPV = OatPV(idx, obj.Geometry)
            oatPV_list.append(oatPV)

        cnt_pv += 1
    else:
        pass

for idx, obj in enumerate(iter(object_table)):
    if (obj.Attributes.LayerIndex == layer_idx_of_pv):
        total_num_pv += 1

print('total num of pv: ', total_num_pv)
print()

for idx, oatPV in enumerate(oatPV_list):
    print('oatPV ', idx, ' : ', oatPV)
```


## read `cable`

```{python}
layer_idx_of_cable = 1
cnt_cable = 0
max_num_obj = 3
total_num_cable = 0

for idx, obj in enumerate(iter(object_table)):
    # print the first 3 obj on a layer
    if (obj.Attributes.LayerIndex == layer_idx_of_cable) and (cnt_cable < max_num_obj):
        print('object ', idx, ' Object                : ', obj)
        print('       ', idx, ' Geometry              : ', obj.Geometry)
        print('       ', idx, ' Attributes            : ', obj.Attributes)
        print('       ', idx, ' Attributes.Id         : ', obj.Attributes.Id)
        print('       ', idx, ' Attributes.Name       : ', obj.Attributes.Name)
        print('       ', idx, ' Attributes.LayerIndex : ', obj.Attributes.LayerIndex)
        print('       ', idx, ' Attributes.ObjectColor: ', obj.Attributes.ObjectColor)
        print('       ', idx, ' Attributes.Visible    : ', obj.Attributes.Visible)
        print()

        # if geom is PolylineCurve, print its details
        if isinstance(obj.Geometry, rhino3dm.PolylineCurve):
            print('            curve IsClosed     :', obj.Geometry.IsClosed)
            print('            curve IsPlanar     :', obj.Geometry.IsPlanar())
            print('            curve IsPolyline   :', obj.Geometry.IsPolyline())
            print()

            print('            curve PointCount   :', obj.Geometry.PointCount)
            
            for i in range(obj.Geometry.PointCount):
                print('            curve pt ', i, ' : ', obj.Geometry.Point(i))
                # print('           curve pt ', i, ' : ', obj.Geometry.ToPolyline().PointAt(i)) -- alternative

            print()

            print('            curve SegmentCount :', obj.Geometry.ToPolyline().SegmentCount)

            for i in range(obj.Geometry.ToPolyline().SegmentCount):
                print('            segement ', i, ' : ', obj.Geometry.ToPolyline().SegmentAt(i))

            print()

        cnt_cable += 1
    else:
        pass

for idx, obj in enumerate(iter(object_table)):
    if (obj.Attributes.LayerIndex == layer_idx_of_cable):
        total_num_cable += 1

print('total num of cable: ', total_num_cable)
```


## read `text` 

```{python}
layer_idx_of_text = 2
cnt_text = 0
max_num_obj = 3
total_num_text = 0

for idx, obj in enumerate(iter(object_table)):
    if (obj.Attributes.LayerIndex == layer_idx_of_text) and (cnt_text < max_num_obj):
        print('object ', idx, ' Object                  : ', obj)
        print('       ', idx, ' Geometry                : ', obj.Geometry)
        print('       ', idx, ' Attributes              : ', obj.Attributes)
        print('       ', idx, ' Attributes.Id           : ', obj.Attributes.Id)
        print('       ', idx, ' Attributes.Name         : ', obj.Attributes.Name)
        print('       ', idx, ' Attributes.LayerIndex   : ', obj.Attributes.LayerIndex)
        print('       ', idx, ' Attributes.ObjectColor  : ', obj.Attributes.ObjectColor)
        print('       ', idx, ' Attributes.Visible      : ', obj.Attributes.Visible)
        print()

        # if geom is AnnotationBase, print its PlainText
        if isinstance(obj.Geometry, rhino3dm.AnnotationBase):
            print('            Geometry.PlainText     : ', obj.Geometry.PlainText)
            print()

        cnt_text += 1

for idx, obj in enumerate(iter(object_table)):
    if (obj.Attributes.LayerIndex == layer_idx_of_text):
        total_num_text += 1

print('total num of text: ', total_num_text)
```


## create dataclass `MyPt`

```{python}
@dataclass
class OatPt:
    idx  : int
    point: rhino3dm.Point3d
    name : str
```


## read `pt`

```python
# layer_idx_of_pt = 2
# cnt_pt = 0
# max_num_obj = 3
# total_num_pt = 0
#
# oaPt_list_1 = []
#
# for idx, obj in enumerate(iter(object_table)):
#     if (obj.Attributes.LayerIndex == layer_idx_of_pt) and (cnt_pt < max_num_obj):
#         print('object ', idx, ' Object                  : ', obj)
#         print('       ', idx, ' Geometry                : ', obj.Geometry)
#         print('       ', idx, ' Attributes              : ', obj.Attributes)
#         print('       ', idx, ' Attributes.Id           : ', obj.Attributes.Id)
#         print('       ', idx, ' Attributes.Name         : ', obj.Attributes.Name)
#         print('       ', idx, ' Attributes.LayerIndex   : ', obj.Attributes.LayerIndex)
#         print('       ', idx, ' Attributes.ObjectColor  : ', obj.Attributes.ObjectColor)
#         print('       ', idx, ' Attributes.Visible      : ', obj.Attributes.Visible)
#         print()
#
#         # if geom is Point, print its xyz
#         if isinstance(obj.Geometry, rhino3dm.Point):
#             pt = obj.Geometry.Location
#             print('            Geometry.Location.X     : ', pt.X)
#             print('            Geometry.Location.Y     : ', pt.Y)
#             print('            Geometry.Location.Z     : ', pt.Z)
#
#             oatPt = OatPt(idx, pt, str(idx))
#             oaPt_list_1.append(oatPt)
#
#             print()
#
# for idx, obj in enumerate(iter(object_table)):
#     if (obj.Attributes.LayerIndex == layer_idx_of_pt):
#         total_num_pt += 1
#
# print('total num of pt: ', total_num_pt)
```


```{python}
# for idx, oatPt in enumerate(oaPt_list_1):
#     print('myPt', idx, ' : ', oatPt)
#     print('    type of idx in myPt:', type(oatPt.idx))
#     print('    type of point in myPt:', type(oatPt.point))
#     print('    type of name in myPt:', type(oatPt.name))
```


## read `TextDot` 

```{python}
max_num_obj = 3
cnt_textDot = 0
total_num_textDot = 0

for idx, obj in enumerate(iter(object_table)):
    obj_geom = obj.Geometry
    obj_attr = obj.Attributes

    if (isinstance(obj_geom, rhino3dm.TextDot)) and (cnt_textDot < max_num_obj):
        print('textDot object ', idx, ' : ', obj_geom)
        print('        position            : ', obj_geom.Point)
        print('        text                : ', obj_geom.Text)
        print('        Attributes object   : ', obj_attr)
        print('        attribs.Id          : ', obj_attr.Id)
        print('        attribs.Name        : ', obj_attr.Name)
        print('        attribs.LayerIndex  : ', obj_attr.LayerIndex)
        print('        attribs.ObjectColor : ', obj_attr.ObjectColor)
        print('        attribs.Visible     : ', obj_attr.Visible)
        print()

        cnt_textDot += 1

for idx, obj in enumerate(iter(object_table)):
    if isinstance(obj.Geometry, rhino3dm.TextDot):
        total_num_textDot += 1

print('total num of textDot: ', total_num_textDot)
```


## read `EarthAnchorPoint`

```{python}
# get the `Settings` object as a property of File3dm object
file3dm_settings = file3dm_obj.Settings 
print('file3dm settings: ', file3dm_settings)

# get `EarthAnchorPoint` in settings
earthAnchorPoint = file3dm_settings.EarthAnchorPoint
print('EarthAnchorPoint: ', earthAnchorPoint)
print()

# check if the earthAnchorPoint is set or not
earthAnchorPoint_set_or_not = earthAnchorPoint.EarthLocationIsSet()
print('earthAnchorPoint is set: ', earthAnchorPoint_set_or_not)

# get lat and lon of earthAnchorPoint
earthAnchorPoint_lat = earthAnchorPoint.EarthBasepointLatitude
earthAnchorPoint_lon = earthAnchorPoint.EarthBasepointLongitude
print('earthAnchorPoint latitude : ', earthAnchorPoint_lat)
print('earthAnchorPoint longitude: ', earthAnchorPoint_lon)
print()

# get ModelBasePoint
modelBasePoint = earthAnchorPoint.ModelBasePoint
print('model base point: ', modelBasePoint)

# get `ModelToEarthTransform`
modelUnitSystem = file3dm_settings.ModelUnitSystem
print('modelUnitSystem : ', modelUnitSystem)

modelToEarthTransform = earthAnchorPoint.GetModelToEarthTransform(modelUnitSystem)
print('modelToEarthTransform : ', modelToEarthTransform)

# create a test pt
# test_pt = rhino3dm.Point3d(91.2724, 187.784, 0)
test_pt = rhino3dm.Point3d(140.492,236.638,0)
test_pt_transformed_in_lon_lat_ele = test_pt.Transform(modelToEarthTransform)
print('test pt transformed in lon, lat, ele: ', test_pt_transformed_in_lon_lat_ele)
```


:::: {.column-margin}
::: {.callout-tip title="File3dm.Settings" collapse="true"}
[**_property_**  `rhino3dm.File3dm.Settings`](https://mcneel.github.io/rhino3dm/python/api/File3dm.html#rhino3dm.File3dm.Settings)

<br /> 

File3dmSettings: Settings include tolerance, and unit system, and defaults used for creating views and objects.

<br />

Return: A rhino3dm.File3dm.Settings object
:::

::: {.callout-tip title="rhino3dm.File3dmSettings" collapse="true"}
[**_class_**  `rhino3dm.File3dm`](https://mcneel.github.io/rhino3dm/python/api/File3dmSettings.html)

<br />

Property: 

- `ModelBasePoint`

- `EarthAnchorPoint`

- `ModelUnitSystem`
:::

::: {.callout-tip title="rhino3dm.EarthAnchorPoint" collapse="true"}
[**_class_**  `rhino3dm.EarthAnchorPoint`](https://mcneel.github.io/rhino3dm/python/api/EarthAnchorPoint.html#module-rhino3dm)

Property:

- EarthBasepointLatitude

- EarthBasepointLongitude

- ModelBasePoint

- GetModelToEarthTransform(modelUnitSystem)
:::

::: {.callout-tip title="Set EarthAnchorPoint in Rhino" collapse="true"}
[**_cmd_**  `Set EarthAnchorPoint in Rhino`](https://docs.mcneel.com/rhino/5/help/en-us/commands/earthanchorpoint.htm)
:::

::: {.callout-tip title="Rhino to Google Earth" collapse="true"}
[**_wiki_**  `Rhino to Google Earth`](https://wiki.mcneel.com/rhino/googleearth)
:::
::::
