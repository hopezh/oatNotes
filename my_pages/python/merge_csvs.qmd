---
title: "Merge CSVs"
filters:
    - line-highlight
---


```{python}
from glob import glob
import os

import polars as pl
pl.Config(tbl_rows=10)

```


# glob CSVs in a folder

```{python}
#| source-line-numbers: "1-3"

csv_dir = "../../data/csvs/"
csv_path_glob = os.path.join(csv_dir, '*.csv')
csv_list = glob(csv_path_glob)

for idx, csv in enumerate(csv_list):
    print('csv ', idx, ' : ', csv)

```


:::: {.column-margin}
::: {.callout-tip title="glob" collapse="true"}
[glob](https://www.geeksforgeeks.org/how-to-use-glob-function-to-find-files-recursively-in-python/)
:::
::::


# merge CSVs into a df

```{python}
%%time

df_merged = pl.read_csv(csv_path_glob)      # <1>

# q = (
#     pl.scan_csv(csv_path_glob)
# )
# df_merged = q.collect()

df_merged
```
1. Use `globbing` patterns to read multiple files into a single DF.


:::: {.column-margin}

::: {.callout-tip title="Dealing with multple files" collapse="true"}
[Multiple](https://docs.pola.rs/user-guide/io/multiple/)
:::

::: {.callout-tip title="polars.read_csv" collapse="true"}
[polars.read_csv](https://docs.pola.rs/py-polars/html/reference/api/polars.read_csv.html)
:::

::: {.callout-tip title="polars.scan_csv" collapse="true"}
[polars.scan_csv](https://docs.pola.rs/py-polars/html/reference/api/polars.scan_csv.html)
:::

::::


# write the df as a merged CSV

```{python}
csv_merged_path = os.path.join("../../data/csv_merged/", "cn_daqing_zone_1_04-08_merged.csv")
df_merged.write_csv(csv_merged_path)
print('...merged csv written.')
df_merged
```


:::: {.column-margin}
::: {.callout-tip title="polars.DataFrame.write_csv" collapse="true"}
[polars.DataFrame.write_csv](https://docs.pola.rs/py-polars/html/reference/api/polars.DataFrame.write_csv.html#polars.DataFrame.write_csv)
:::
::::


# (lazy-)filter a DF by a list of items in a column

```python
%%time

strings_to_filter = [
    '1-4-NB05-10',
    '1-4-NB05-9',
    '1-8-NB02-4',
]

query = (                               # <2>
    pl.scan_csv(csv_path_glob)
      .filter(pl.col('string_name')
      .is_in(strings_to_filter))
)

df_filtered = query.collect()           # <3>

df_filtered
```
2. Build a query(s) in `lazy` mode
3. execute the query(s) when its `collected`


:::: {.column-margin}
::: {.callout-tip title="lazy/eager API" collapse="true"}
[Lazy/eager API](https://docs.pola.rs/user-guide/concepts/lazy-vs-eager/)
:::
::::


