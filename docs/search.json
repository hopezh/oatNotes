[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OatNotes",
    "section": "",
    "text": "This is oatâ€™s notebook."
  },
  {
    "objectID": "quarto_tabset.html",
    "href": "quarto_tabset.html",
    "title": "quarto tabset",
    "section": "",
    "text": "create tabset panel\n::: {.panel-tabset}\n\n## code block A\n```{.python}\nimport polars as pl\nprint('polars version:', pl.__version__)\n```\n\n## code block B \n```{.python}\nimport pandas as pd\nprint('pandas version:', pd.__version__)\n```\n:::\n\n\nuse polars df in plotlyuse pandas df in plotly\n\n\n\nimport polars as pl\nimport plotly.express as px\n\nwide_df = pl.DataFrame(\n    {\n        \"nation\": [\"South Korea\", \"China\", \"Canada\"],\n        \"gold\": [24, 10, 9],\n        \"silver\": [13, 15, 12],\n        \"bronze\": [9, 12, 12],\n    }\n)\n\nfig = px.bar(\n    wide_df,\n    x=\"nation\",\n    y=[\"gold\", \"silver\", \"bronze\"],\n    title=\"Wide-Form Input\"\n)\n\nfig.show()\n\n\n                                                \n\n\n\n\nimport plotly.express as px\ndf = px.data.iris()\n\nUse directly Columns as argument. You can use tab completion for this!\nfig = px.scatter( df, x=df.sepal_length, y=df.sepal_width, color=df.species, size=df.petal_length )\nfig.show()\n\n\n\n\n\n\nexpand code block and its output to full screen width\n\ncsv_path = \"./data/tw_taoyuan_cankun_merged_updated.csv\"\ndf = pl.read_csv(csv_path)\ndf.head(5)\n\n\nshape: (5, 20)\n\n\n\nstring_idx\nstring_name\nstring_name_x\nstring_name_y\nstring_box_idx\nCB_name\nPhase\nstring_num\nstring_box_v1_x\nstring_box_v1_y\nstring_box_v2_x\nstring_box_v2_y\nstring_box_v3_x\nstring_box_v3_y\nstring_box_v4_x\nstring_box_v4_y\nnum_modules\nmodule_orientation\nnum_module_along_x\nnum_module_along_y\n\n\ni64\nstr\nf64\nf64\ni64\ni64\ni64\ni64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\nf64\ni64\nstr\ni64\ni64\n\n\n\n\n0\n\"20-9\"\n5228.161911\n724.563534\n0\n0\n0\n0\n5217.39348\n723.963534\n5238.930342\n723.963534\n5238.930342\n725.163534\n5217.39348\n725.163534\n362\n\"L\"\n10\n1\n\n\n0\n\"20-9\"\n5228.161911\n725.867048\n1\n0\n0\n0\n5217.39348\n725.267048\n5238.930342\n725.267048\n5238.930342\n726.467048\n5217.39348\n726.467048\n361\n\"L\"\n10\n1\n\n\n1\n\"21-3\"\n5206.643309\n724.563534\n0\n0\n0\n0\n5195.874878\n723.963534\n5217.41174\n723.963534\n5217.41174\n725.163534\n5195.874878\n725.163534\n360\n\"L\"\n10\n1\n\n\n1\n\"21-3\"\n5206.643309\n725.867048\n1\n0\n0\n0\n5195.874878\n725.267048\n5217.41174\n725.267048\n5217.41174\n726.467048\n5195.874878\n726.467048\n359\n\"L\"\n10\n1\n\n\n2\n\"20-8\"\n5228.161911\n727.170562\n0\n0\n0\n0\n5217.39348\n726.570562\n5238.930342\n726.570562\n5238.930342\n727.770562\n5217.39348\n727.770562\n358\n\"L\"\n10\n1"
  },
  {
    "objectID": "quarto_tabset.html#code-block-b",
    "href": "quarto_tabset.html#code-block-b",
    "title": "quarto tabset",
    "section": "",
    "text": "::::\n\nuse polars df in plotlyuse pandas df in plotly\n\n\n\nimport polars as pl\nimport plotly.express as px\n\nwide_df = pl.DataFrame(\n    {\n        \"nation\": [\"South Korea\", \"China\", \"Canada\"],\n        \"gold\": [24, 10, 9],\n        \"silver\": [13, 15, 12],\n        \"bronze\": [9, 12, 12],\n    }\n)\n\nfig = px.bar(\n    wide_df,\n    x=\"nation\",\n    y=[\"gold\", \"silver\", \"bronze\"],\n    title=\"Wide-Form Input\"\n)\n\nfig.show()\n\n\n                                                \n\n\n\n\n\nimport plotly.express as px\n\ndf = px.data.iris()\n\n# Use directly Columns as argument. You can use tab completion for this!\nfig = px.scatter(\n    df,\n    x=df.sepal_length,\n    y=df.sepal_width,\n    color=df.species,\n    size=df.petal_length\n)\n\nfig.show()"
  }
]